using Core.Entities;
using Infrastructure.Data;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;

namespace HMS.web.Controllers
{
    public class PatientController : Controller
    {
        private readonly UserManager<Patient> _userManager;
        private readonly SignInManager<Patient> _signInManager;
        private readonly HospitalDbContext _context;

        public PatientController(UserManager<Patient> userManager, SignInManager<Patient> signInManager, HospitalDbContext context)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _context = context;
        }
        [Authorize]
        public IActionResult Index()
        {

            TempData["Message"] = $"Welcome, {HttpContext.Request.Cookies["PatientName"]}!";
            var doctors = new List<Doctor>
            {

                new Doctor { DoctorId = 1, Name = "Dr. Amanda Jepson", Specialization = "Neurosurgeon" },
                new Doctor{ DoctorId = 2, Name = "Dr. Taylor", Specialization = "Cardiologist" },
                new Doctor{ DoctorId = 3, Name = "Dr. Archer", Specialization = "Ophthalmologist" },
                new Doctor { DoctorId = 4, Name = "Dr. Penny", Specialization = "Psychiatrist" },
                new Doctor { DoctorId = 5, Name = "Dr. Riley", Specialization = "Gynecologist" }
            };
            return View(doctors);
        }
        public IActionResult SearchDoctors(string query)
        {
            var doctors = new List<Doctor>
    {
        new Doctor { DoctorId = 1, Name = "Dr. Amanda Jepson", Specialization = "Neurosurgeon" },
        new Doctor{ DoctorId = 2, Name = "Dr. Taylor", Specialization = "Cardiologist" },
        new Doctor{ DoctorId = 3, Name = "Dr. Archer", Specialization = "Ophthalmologist" },
        new Doctor { DoctorId = 4, Name = "Dr. Penny", Specialization = "Psychiatrist" },
        new Doctor { DoctorId = 5, Name = "Dr. Riley", Specialization = "Gynecologist" }
    };

            if (!string.IsNullOrWhiteSpace(query))
            {
                doctors = doctors
                    .Where(d => d.Name.Contains(query, StringComparison.OrdinalIgnoreCase)
                             || d.Specialization.Contains(query, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }

            return PartialView("_DoctorCardList", doctors);
        }
        [Authorize]
        public async Task<IActionResult> Profile()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null) return RedirectToAction("Signin");

            //var appointments = _context.Appointments
            //    .Where(a => a.PatientId == user.Id)
            //    .Include(a => a.Doctor)
            //    .ToList();
            var appointments = new List<Appointment>
            {
                new Appointment
                {
                    AppointmentId = 1,
                    PatientId = user.Id,
                    AppointmentDate = DateTime.Now.AddDays(1),
                    Description = "Routine Checkup",
                    Doctor = new Doctor { DoctorId = 1, Name = "Dr. Amanda Jepson", Specialization = "Neurosurgeon" }
                },
                new Appointment
                {
                    AppointmentId = 2,
                    PatientId = user.Id,
                    AppointmentDate = DateTime.Now.AddDays(3),
                    Description = "Follow-up for MRI results",
                    Doctor = new Doctor { DoctorId = 2, Name = "Dr. Taylor", Specialization = "Cardiologist" }
                },
                new Appointment
                {
                    AppointmentId = 3,
                    PatientId = user.Id,
                    AppointmentDate = DateTime.Now.AddDays(5),
                    Description = "Eye examination",
                    Doctor = new Doctor { DoctorId = 3, Name = "Dr. Archer", Specialization = "Ophthalmologist" }
                }
            };  
            var model = new ProfileViewModel
            {
                Name = user.Name,
                Email = user.Email,
                Appointments = appointments
            };

            return View(model);
        }

        [HttpPost]
        public async Task<IActionResult> UpdateProfile(ProfileViewModel model)
        {
            if (!ModelState.IsValid || (model.NewPassword != model.ConfirmPassword)) 
                return View("Profile", model);

            var user = await _userManager.GetUserAsync(User);
            if (user == null) return RedirectToAction("Signin");

            user.Name = model.Name;
            user.Email = model.Email;
            user.UserName = model.Email;
            user.Disease = model.Disease;

            var result = await _userManager.UpdateAsync(user);
            if (!result.Succeeded)
            {
                ModelState.AddModelError("", "Failed to update profile.");
                return View("Profile", model);
            }

            if (!string.IsNullOrEmpty(model.OldPassword) && !string.IsNullOrEmpty(model.NewPassword))
            {
                var passResult = await _userManager.ChangePasswordAsync(user, model.OldPassword, model.NewPassword);
                if (!passResult.Succeeded)
                {
                    ModelState.AddModelError("", "Failed to update password.");
                    return View("Profile", model);
                }
            }
            Console.WriteLine("Profile updated successfully.");
            TempData["Message"] = "Profile updated successfully.";
            return RedirectToAction("Profile");
        }

        public IActionResult Signup()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Signup(RegisterViewModel model)
        {
            if (ModelState.IsValid)
            {
                var patient = new Patient
                {
                    UserName = model.Email,
                    Email = model.Email,
                    Name = model.Name
                };

                var result = await _userManager.CreateAsync(patient, model.Password);
                if (result.Succeeded)
                { 
                    return RedirectToAction("Signin", "Patient");
                }

                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            return View(model);
        }

        public IActionResult Signin()
        {
            TempData["Message"] = "Please enter your credentials to access your account.";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Signin(SignInViewModel model)
        {
            if (ModelState.IsValid)
            {
                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, isPersistent: false, lockoutOnFailure: false);
                if (result.Succeeded)
                {
                    var user = await _userManager.FindByEmailAsync(model.Email);
                    Console.WriteLine(user?.Name); // user.Name Yahan cookie banani hyyy or nam view pay lana hayyy
                    HttpContext.Response.Cookies.Append("PatientName", user?.Name);
                    return RedirectToAction("Index", "Patient");
                }
                TempData["Message"] = "Email or password is incorrect.";
                ModelState.AddModelError(string.Empty, "Invalid login attempt.");
            }

            return View(model);
        }
        [Authorize]
        public IActionResult SignOutConfirmation()
        {
            return View();
        }
        public async Task<IActionResult> SignOut()
        {
            // Sign out the user
            await _signInManager.SignOutAsync();
            return RedirectToAction("Index", "Home");
        }
    }
}
